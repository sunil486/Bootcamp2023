package com.sunil486.tranx.spring_transactional_01.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Component
@Aspect
//What code need to be here i.e non-functional code or non-business code
public class DataSourceAspect {

	// @Pointcut("within(com.sunil486.tranx.spring_transactional_01.service.*)")
	// @Pointcut("within(com..service.*)")
	@Pointcut("within(com.sunil486.tranx.spring_transactional_01.service.*) || within(com.sunil486.tranx.spring_transactional_01.repo.*)")

	public void logMethodPointCut() {

	}

	// When the logic of this method run==> before/after/before and after
	// This is call advice
	/*
	 * @Before("logMethodPointCut()") public void logBeforeMethodCall() {
	 * 
	 * System.out.println("method execution started"); }
	 */

	/*
	 * @After("logMethodPointCut()") public void logAfterMethodCall() {
	 * 
	 * System.out.println("method execution completed"); }
	 */

	@Around("logMethodPointCut()")
	public Object logBeforeAfterMethodCall(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {

		//before
		String name = proceedingJoinPoint.getSignature().getName();
		System.out.println("method started " +name);
		
		//call to your method
		Object returnValue = proceedingJoinPoint.proceed();
		System.out.println("method return value " +returnValue);
		
		//after the method executed
		System.out.println("method completed " +name);

		return returnValue;
	}

}
